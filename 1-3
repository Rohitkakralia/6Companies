1401. Circle and Rectangle Overlapping
class Solution {
    public boolean checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {
        if( sqdt(xCenter, yCenter, x1, y1) <= radius*radius ||
            sqdt(xCenter, yCenter, x1, y2) <= radius*radius ||
            sqdt(xCenter, yCenter, x2, y2) <= radius*radius ||
            sqdt(xCenter, yCenter, x2, y1) <= radius*radius) return true;
        
        if(radius >= x1 - xCenter && radius >= xCenter - x2 && yCenter >= y1 && yCenter <= y2) return true;

        if(radius >= y1 - yCenter && radius >= yCenter - y2 && xCenter <= x2 && xCenter >= x1) return true;

        return false;
    }
    public int sqdt(int x1, int y1, int x2, int y2){
        return ((x2-x1)*(x2-x1) + (y2 - y1)*(y2-y1));
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
1823. Find the Winner of the Circular Game
class Solution {
    public int findTheWinner(int n, int k) {
        Set<Integer> set = new HashSet<>();

        int cnt = 0;
        int i=0;
        for(i=1; i<=n; i++){
            if(set.size() >= n-1 && !set.contains(i)) break;
            if(set.contains(i)) {
                if(i == n) i=0;
                continue;
            }
                
            cnt++;
            if(cnt == k){
                set.add(i);
                cnt = 0;
            }
            if(i == n) {
                i = 0;
            }
        }
        return i;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
354. Russian Doll Envelopes
import java.util.Arrays;

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int n = envelopes.length;
        if (n == 0) return 0;

        // Step 1: Sort envelopes by width (ascending), and by height (descending) if widths are the same
        Arrays.sort(envelopes, (a, b) -> {
            if (a[0] == b[0]) {
                return b[1] - a[1]; // Descending order of height for same width
            }
            return a[0] - b[0]; // Ascending order of width
        });

        // Step 2: Extract the heights and find LIS
        int[] heights = new int[n];
        for (int i = 0; i < n; i++) {
            heights[i] = envelopes[i][1];
        }

        return lengthOfLIS(heights);
    }

    // Function to find the length of Longest Increasing Subsequence
    private int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int len = 0;

        for (int num : nums) {
            int index = Arrays.binarySearch(dp, 0, len, num);
            if (index < 0) index = -(index + 1); // Get insertion point
            dp[index] = num;
            if (index == len) len++;
        }

        return len;
    }
}
